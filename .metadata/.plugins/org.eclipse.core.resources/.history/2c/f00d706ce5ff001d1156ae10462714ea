package com.minutes.microservices.apigateway;

import java.util.function.Function;

import org.springframework.cloud.gateway.route.Route;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.Buildable;
import org.springframework.cloud.gateway.route.builder.PredicateSpec;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


//This class is used for custom routing usnig spring clod gateway

@Configuration
public class ApiGatewayConfiguration {
	
	
	@Bean
	public RouteLocator gatewayRouter(RouteLocatorBuilder builder)
	{
		//Initial way
		/**
		Function<PredicateSpec, Buildable<Route>> routeFunction = 
				p->p.path("/get").filters(
						f->f.addRequestHeader("MuHeader","MyURI")
							.addRequestParameter("Param","MyValue"))
							.uri("http://httpbin.org:80");
		return builder.routes().route(routeFunction ).build();**/
		
		return builder.routes().
				route(p->p.path("/get").
						filters(
								f->f.addRequestHeader("MuHeader","MyURI")
						.addRequestParameter("Param","MyValue"))
						.uri("http://httpbin.org:80")).
				
				route(p->p.path("/currency-exchange/**")    //this is to avoid first currency exchange in 
						.uri("lb:currency-exchange")).       //http://localhost:8765/currency-exchange/currency-exchange/from/USD/to/INR
															//and remove below 2 in appp.properties
																//spring.cloud.gateway.discovery.locator.enabled=true
																//spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true
				
				route(p->p.path("/currency-conversion/**")     
						.uri("lb:currency-conversion")). 
				
				route(p->p.path("/currency-conversion-feign/**")    
						.uri("lb:currency-conversion-feign")) 
				
				.build();
		
	}
	
	
}
